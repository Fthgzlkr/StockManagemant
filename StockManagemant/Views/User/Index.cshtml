@{
    ViewData["Title"] = "Kullanıcı Yönetimi";
}
<link rel="stylesheet" href="~/css/Product.css" asp-append-version="true" />
<link rel="stylesheet" href="~/css/GlobalStyles.css" asp-append-version="true" />
<link rel="stylesheet" href="~/css/Site.css" asp-append-version="true" />

<h2 class="text-center mt-3 mb-4">Kullanıcı Yönetimi</h2>

<div class="container">
    <table id="userGrid"></table>
    <div id="userPager"></div>
</div>

<script>
    $(document).ready(function () {
        $("#userGrid").jqGrid({
            url: '/User/GetUsers',
            datatype: "json",
            mtype: "GET",
            colNames: ['ID', 'Kullanıcı Adı', 'Rol', 'Depo ID', 'İşlemler'],
            colModel: [
                { name: 'id', index: 'id', width: 50, align: "center", sortable: true, key: true, hidden: true },
                { name: 'username', index: 'username', width: 150, sortable: true },
                { name: 'role', index: 'role', width: 100, sortable: true },
                { name: 'assignedWarehouseId', index: 'assignedWarehouseId', width: 100, sortable: true },
                {
                    name: "actions",
                    label: "İşlemler",
                    align: "center",
                    formatter: function (cellvalue, options, rowObject) {
                        return `
                            <div class="action-icons">
                                <i class="fa-solid fa-pen text-primary fa-xl edit-user" data-id="${rowObject.id}" data-username="${rowObject.username}" data-role="${rowObject.role}" data-warehouse="${rowObject.assignedWarehouseId}" title="Düzenle"></i>
                                <i class="fa-solid fa-trash text-danger fa-xl delete-user" data-id="${rowObject.id}" title="Sil"></i>
                            </div>`;
                    }
                }
            ],
            pager: '#userPager',
            rowNum: 10,
            rowList: [10, 20, 30],
            sortname: 'id',
            sortorder: 'asc',
            viewrecords: true,
            autowidth: true,
            shrinkToFit: true,
            guiStyle: "bootstrap4",
            caption: "Kullanıcı Listesi",
            jsonReader: {
                root: "data",
                page: "page",
                total: "total",
                records: "records",
                repeatitems: false,
                id: "id"
            },
            loadComplete: function () {
                if (!$('#addUserBtn').length) {
                    $("#userPager_left").append(`
                        <button class="btn btn-sm btn-outline-success ms-2" id="addUserBtn">
                            <i class="fa fa-plus me-1"></i>Yeni Kullanıcı
                        </button>`);
                }
            }
        });

        $("#userGrid").jqGrid('navGrid', '#userPager',
            { edit: false, add: false, del: false, search: false, refresh: true }
        );

        $(document).on("click", ".delete-user", function () {
            let userId = $(this).data("id");
            Swal.fire({
                title: "Kullanıcı Sil",
                text: "Bu kullanıcıyı silmek istediğinize emin misiniz?",
                icon: "warning",
                showCancelButton: true,
                confirmButtonColor: "#3085d6",
                cancelButtonColor: "#d33",
                confirmButtonText: "Evet, Sil!",
                cancelButtonText: "İptal"
            }).then((result) => {
                if (result.isConfirmed) {
                    $.post('/User/DeleteUser/' + userId, function () {
                        Swal.fire("Başarılı", "Kullanıcı silindi", "success");
                        $("#userGrid").trigger("reloadGrid");
                    }).fail(function () {
                        Swal.fire("Hata", "Silme işlemi başarısız oldu!", "error");
                    });
                }
            });
        });

        $(document).on("click", "#addUserBtn", function () {
            Swal.fire({
                title: "Yeni Kullanıcı Ekle",
                html: `
                    <div class="container-fluid">
                        <div class="mb-3"><input type="text" id="swalUsername" class="form-control" placeholder="Kullanıcı Adı"></div>
                        <div class="mb-3"><input type="password" id="swalPassword" class="form-control" placeholder="Şifre"></div>
                        <div class="mb-3">
                            <select id="swalRole" class="form-select">
                                <option value="Admin">Admin</option>
                                <option value="Operator">Operator</option>
                                <option value="BasicUser">BasicUser</option>
                            </select>
                        </div>
                        <div class="mb-3" id="warehouseContainer" style="display:none;">
                            <select id="swalWarehouse" class="form-select">
                                <option value="">Depo Seçin</option>
                            </select>
                        </div>
                    </div>`,
                didOpen: () => {
                    const roleSelect = document.getElementById("swalRole");
                    const warehouseSelect = document.getElementById("swalWarehouse");
                    const warehouseContainer = document.getElementById("warehouseContainer");

                    roleSelect.addEventListener("change", function () {
                        if (this.value === "BasicUser") {
                            warehouseContainer.style.display = "block";
                        } else {
                            warehouseContainer.style.display = "none";
                            warehouseSelect.value = "";
                        }
                    });

                    fetch("/Warehouse/GetAllWarehouses")
                        .then(res => res.json())
                        .then(data => {
                            data.data.forEach(w => {
                                let opt = document.createElement("option");
                                opt.value = w.id;
                                opt.innerText = w.name;
                                warehouseSelect.appendChild(opt);
                            });
                        });
                },
                preConfirm: () => {
                    const username = document.getElementById('swalUsername').value;
                    const password = document.getElementById('swalPassword').value;
                    const role = document.getElementById('swalRole').value;
                    const assignedWarehouseId = document.getElementById('swalWarehouse').value || null;

                    if (!username || !password) {
                        Swal.showValidationMessage("Kullanıcı adı ve şifre zorunludur!");
                        return false;
                    }

                    if (role === "BasicUser" && !assignedWarehouseId) {
                        Swal.showValidationMessage("BasicUser için depo seçilmelidir!");
                        return false;
                    }

                    return { username, password, role, assignedWarehouseId };
                },
                showCancelButton: true,
                confirmButtonText: 'Kaydet',
                cancelButtonText: 'İptal'
            }).then((result) => {
                if (result.isConfirmed) {
                    $.ajax({
                        url: "/User/CreateUser",
                        type: "POST",
                        contentType: "application/json",
                        data: JSON.stringify(result.value),
                        success: function (res) {
                            if (res.success) {
                                Swal.fire("Başarılı", res.message, "success");
                                $("#userGrid").trigger("reloadGrid");
                            } else {
                                Swal.fire("Hata", res.message, "error");
                            }
                        },
                        error: function () {
                            Swal.fire("Hata", "Kullanıcı eklenemedi!", "error");
                        }
                    });
                }
            });
        });

        $(document).on("click", ".edit-user", function () {
            let id = $(this).data("id");
            let username = $(this).data("username");
            let role = $(this).data("role");
            let warehouseId = $(this).data("warehouse") || "";

            Swal.fire({
                title: "Kullanıcı Güncelle",
                html: `
                    <div class="container-fluid">
                        <div class="mb-3"><input type="text" id="swalUsername" class="form-control" value="${username}" placeholder="Kullanıcı Adı" disabled></div>
                        <div class="mb-3"><input type="password" id="swalPassword" class="form-control" placeholder="Yeni Şifre (boş bırakılırsa değişmez)"></div>
                        <div class="mb-3">
                            <select id="swalRole" class="form-select">
                                <option value="Admin" ${role === "Admin" ? "selected" : ""}>Admin</option>
                                <option value="Operator" ${role === "Operator" ? "selected" : ""}>Operator</option>
                                <option value="BasicUser" ${role === "BasicUser" ? "selected" : ""}>BasicUser</option>
                            </select>
                        </div>
                        <div class="mb-3" id="warehouseContainer" style="display:none;">
                            <select id="swalWarehouse" class="form-select">
                                <option value="">Depo Seçin</option>
                            </select>
                        </div>
                    </div>`,
                didOpen: () => {
                    const roleSelect = document.getElementById("swalRole");
                    const warehouseSelect = document.getElementById("swalWarehouse");
                    const warehouseContainer = document.getElementById("warehouseContainer");

                    roleSelect.addEventListener("change", function () {
                        if (this.value === "BasicUser") {
                            warehouseContainer.style.display = "block";
                        } else {
                            warehouseContainer.style.display = "none";
                            warehouseSelect.value = "";
                        }
                    });

                    fetch("/Warehouse/GetAllWarehouses")
                        .then(res => res.json())
                        .then(data => {
                            data.data.forEach(w => {
                                let opt = document.createElement("option");
                                opt.value = w.id;
                                opt.innerText = w.name;
                                warehouseSelect.appendChild(opt);
                            });
                            warehouseSelect.value = warehouseId; // set selected warehouse
                            if (role === "BasicUser") {
                                warehouseContainer.style.display = "block";
                            }
                        });
                },
                preConfirm: () => {
                    const password = document.getElementById('swalPassword').value;
                    const role = document.getElementById('swalRole').value;
                    const assignedWarehouseId = document.getElementById('swalWarehouse').value || null;

                    if (role === "BasicUser" && !assignedWarehouseId) {
                        Swal.showValidationMessage("BasicUser için depo seçilmelidir!");
                        return false;
                    }

                    return { username: username, password, role, assignedWarehouseId };
                },
                showCancelButton: true,
                confirmButtonText: 'Güncelle',
                cancelButtonText: 'İptal'
            }).then((result) => {
                if (result.isConfirmed) {
                    $.ajax({
                        url: "/User/UpdateUser/" + id,
                        type: "POST",
                        contentType: "application/json",
                        data: JSON.stringify(result.value),
                        success: function (res) {
                            if (res.success) {
                                Swal.fire("Başarılı", res.message, "success");
                                $("#userGrid").trigger("reloadGrid");
                            } else {
                                Swal.fire("Hata", res.message, "error");
                            }
                        },
                        error: function () {
                            Swal.fire("Hata", "Güncelleme başarısız!", "error");
                        }
                    });
                }
            });
        });
    });
</script>
