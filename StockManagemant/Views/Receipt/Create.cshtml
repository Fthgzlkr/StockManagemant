@model List<StockManagemant.Entities.Models.Product>
@using System.Globalization
@using StockManagemant.Web.Helpers;

@{
    ViewData["Title"] = "Fiş Oluşturma";
}

<!-- 🔥 Başlık -->
<h2 class="text-center my-4 fw-semibold fs-5">📄 Fiş Oluştur</h2>

<!-- Ana Alan -->
<div class="container">
    <div class="row g-4">
        <!-- Sol: Ürün Arama ve Detay -->
        <div class="col-md-6">
            <div class="card shadow-sm p-3">
                <h6 class="fw-bold mb-3 text-primary">🔍 Ürün Arama</h6>
                <div class="input-group input-group-sm mb-2">
                    <input type="text" id="productBarcodeInput" class="form-control" placeholder="Ürün barkodunu girin">
                    <button id="searchProductBtn" class="btn btn-outline-primary px-3">
                        <i class="fas fa-search"></i>
                    </button>
                </div>

                <!-- Aranan Ürün Bilgisi -->
                <div id="searchedProduct" class="mt-3 d-none">
                    <div class="border rounded p-3 bg-light-subtle">
                        <h6 class="text-center fw-semibold mb-2">📦 Ürün Bilgisi</h6>
                        <ul class="list-unstyled small mb-2">
                            <li><strong>Adı:</strong> <span id="productName"></span></li>
                            <li><strong>Kategori:</strong> <span id="productCategory"></span></li>
                            <li><strong>Fiyat:</strong> <span id="productPrice"></span> TL</li>
                            <li><strong>Stok:</strong> <span id="productStock"></span></li>
                        </ul>
                        <label for="productQuantity" class="form-label small mb-1">Miktar:</label>
                        <input type="number" id="productQuantity" class="form-control form-control-sm mb-2" min="1" value="1">
                        <button id="addProductBtn" class="btn btn-success btn-sm w-100">➕ Fişe Ekle</button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Sağ: Fiş Detayı -->
        <div class="col-md-6">
            <div class="card shadow-sm p-3" id="receiptContainer">
                <h6 class="text-center fw-bold mb-3 text-dark">🧾 Fiş</h6>
                <div id="receiptItems" class="small mb-2">
                    <!-- Ürünler buraya gelecek -->
                </div>
                <hr>
                <div class="d-flex justify-content-between fw-semibold">
                    <span>Toplam:</span>
                    <span id="totalAmount">0.00 TL</span>
                </div>
            </div>
        </div>
    </div>

    <!-- Updated placement for receipt type buttons -->
    <div class="container mt-4 text-center">
        <div class="btn-group btn-group-lg" role="group" aria-label="Fiş Türü">
            <input type="radio" class="btn-check" name="receiptType" id="entryRadio" value="1" autocomplete="off" checked>
            <label class="btn btn-outline-success" for="entryRadio">Depo Giriş</label>

            <input type="radio" class="btn-check" name="receiptType" id="exitRadio" value="2" autocomplete="off">
            <label class="btn btn-outline-danger" for="exitRadio">Depo Çıkış</label>
        </div>
    </div>

    <!-- Description area moved outside of the receipt card -->
    <div class="container mt-3">
        <label for="receiptDescription" class="form-label fw-semibold">Açıklama:</label>
        <textarea id="receiptDescription" class="form-control" rows="3" placeholder="İşleme dair açıklama girin..."></textarea>
        <div class="text-center mt-3">
            <button id="createReceiptBtn" class="btn btn-dark btn-lg px-4">
                ✅ Fişi Tamamla
            </button>
        </div>
    </div>
</div>

<!-- 🔗 FontAwesome -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">

<!-- 🎨 Ek CSS -->
<style>
    body {
        background: linear-gradient(to bottom right, #f9fbfd, #e6edf3);
        font-family: "Segoe UI", sans-serif;
    }

    .card {
        border-radius: 10px;
        background-color: #fff;
        border: 1px solid #e3e6ea;
    }

    .btn {
        font-size: 13px;
        border-radius: 6px;
        padding: 6px 12px;
        transition: 0.2s ease-in-out;
    }

    .btn-outline-primary:hover {
        background-color: #0d6efd;
        color: #fff;
    }

    .form-control {
        font-size: 13px;
    }

    #receiptItems .item-row {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 6px 0;
        border-bottom: 1px dashed #ddd;
    }

    #receiptItems .item-row:last-child {
        border-bottom: none;
    }

    .remove-product {
        font-size: 11px;
        padding: 2px 6px;
    }

    .btn-group-lg > .btn {
        font-size: 16px;
        padding: 10px 20px;
    }
</style>
<style>
    .btn-check:checked + .btn-outline-success {
        background-color: #198754;
        color: #fff;
    }

    .btn-check:checked + .btn-outline-danger {
        background-color: #dc3545;
        color: #fff;
    }
</style>

<script>
    let warehouseId = new URLSearchParams(window.location.search).get("warehouseId");
    let receiptItems = [];

    // Ürün Arama Butonu
        $("#searchProductBtn").click(function () {
        let barcode = $("#productBarcodeInput").val();
        if (!barcode) {
            Swal.fire("Hata!", "Lütfen geçerli bir ürün barkodu girin!", "error");
            return;
        }

        $.get(`/Receipt/GetWarehouseProduct?warehouseId=${warehouseId}&barcode=${barcode}`, function (response) {
            if (response.success) {
                showSearchedProduct(response.data);
            } else {
                Swal.fire("Hata!", response.message, "error");
            }
        }).fail(function () {
            Swal.fire("Hata!", "Ürün getirilirken bir hata oluştu!", "error");
        });
    });

    // Aranan Ürünü Gösterme
    function showSearchedProduct(product) {
        if (!product || !product.productId) {
            Swal.fire("Hata!", "Geçerli bir ürün bulunamadı!", "error");
            return;
        }

        $("#productName").text(product.productName);
        $("#productCategory").text(product.categoryName);
        $("#productPrice").text(product.price);
        $("#productStock").text(product.stockQuantity);
        $("#productQuantity").attr("max", product.stockQuantity);
        $("#searchedProduct").removeClass("d-none");

        $("#addProductBtn").off("click").on("click", function () {
            let quantity = parseInt($("#productQuantity").val());
            let isExit = document.querySelector("#exitRadio").checked;

            if (quantity < 1 || (isExit && quantity > product.stockQuantity)) {
                Swal.fire("Hata!", isExit ? "Çıkış için geçerli bir miktar girin! Mevcut stok yetersiz." : "Geçerli bir miktar girin!", "error");
                return;
            }
            addProductToReceipt(product, quantity);
        });
    }

    // Ürünü Fişe Ekleme
    function addProductToReceipt(product, quantity) {
        let existingProduct = receiptItems.find(item => item.productId === product.productId);
        if (existingProduct) {
            Swal.fire("Hata!", "Bu ürün zaten fişe eklenmiş!", "error");
            return;
        }

        let newItem = `
            <div class="d-flex justify-content-between mb-1" data-id="${product.productId}">
                <div>
                    <span class="fw-bold">${product.productName}</span>
                    <span class="small text-muted">(${product.categoryName})</span>
                    <span class="small">x ${quantity}</span>
                </div>
                <div>
                    <span>${(product.price * quantity).toFixed(2)} TL</span>
                    <button class="btn btn-danger btn-sm ms-2 remove-product">X</button>
                </div>
            </div>
        `;

        $("#receiptItems").append(newItem);

        receiptItems.push({
            productId: product.productId,
            quantity: quantity,
            price: product.price
        });

        updateTotal();
    }

    // Ürünü Fişten Silme
    $(document).on("click", ".remove-product", function () {
        let row = $(this).closest("div[data-id]");
        let productId = parseInt(row.attr("data-id"));

        receiptItems = receiptItems.filter(p => p.productId !== productId);
        row.remove();

        updateTotal();
    });

    // Toplam Tutarı Güncelle
    function updateTotal() {
        let total = receiptItems.reduce((sum, item) => sum + (item.price * item.quantity), 0);
        $("#totalAmount").text(total.toFixed(2) + " TL");
    }

    // ✅ Fişi Tamamla
    $("#createReceiptBtn").click(function () {
        if (receiptItems.length === 0) {
            Swal.fire("Hata!", "Fişe en az bir ürün eklemelisiniz!", "warning");
            return;
        }

        // Adım 1: Fiş oluştur
        $.ajax({
            url: "/Receipt/CreateReceipt",
            method: "POST",
            contentType: "application/json",
            data: JSON.stringify({
                wareHouseId: parseInt(warehouseId),
                totalAmount: receiptItems.reduce((sum, item) => sum + (item.price * item.quantity), 0),
                date: new Date().toISOString(),
                receiptType: parseInt(document.querySelector("input[name='receiptType']:checked").value),
                description: $("#receiptDescription").val()
            }),
            success: function (res) {
                if (!res.success) {
                    Swal.fire("Hata!", res.message, "error");
                    return;
                }

                const receiptId = res.receiptId;

                // Adım 2: Ürünleri fişe ekle
                $.ajax({
                    url: `/Receipt/AddProductsToReceipt?receiptId=${receiptId}`,
                    method: "POST",
                    contentType: "application/json",
                    data: JSON.stringify(receiptItems),
                    success: function (res2) {
                        if (res2.success) {
                            Swal.fire("Başarılı!", "Fiş başarıyla oluşturuldu.", "success").then(() => {
                                window.location.href = `/Receipt/ListByWarehouse?warehouseId=${warehouseId}`;
                            });
                        } else {
                            Swal.fire("Hata!", res2.message, "error");
                        }
                    },
                    error: function () {
                        Swal.fire("Hata!", "Ürünler fişe eklenemedi!", "error");
                    }
                });
            },
            error: function () {
                Swal.fire("Hata!", "Fiş oluşturulamadı!", "error");
            }
        });
    });
</script>

<!-- FontAwesome CDN (İkonlar İçin) -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
