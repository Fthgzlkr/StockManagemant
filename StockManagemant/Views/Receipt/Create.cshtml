@model List<StockManagemant.Entities.Models.Product>
@using System.Globalization
@using StockManagemant.Web.Helpers;

@{
    ViewData["Title"] = "Fiş Oluşturma";
}

<h2>Fiş Oluştur</h2>

<!-- Ürün Arama Alanı -->
<div class="product-search-container">
    <label for="productIdInput">Ürün ID:</label>
    <input type="number" id="productIdInput" class="form-control" placeholder="Ürün ID girin">
    <button id="searchProductBtn" class="btn btn-primary">Ürünü Getir</button>
</div>

<!-- Seçilen Ürünleri Gösteren Tablo -->
<table class="table mt-4">
    <thead>
        <tr>
            <th>Ürün Adı</th>
            <th>Kategori</th>
            <th>Fiyat</th>
            <th>Stok</th>
            <th>Miktar</th>
            <th>Toplam</th>
            <th>İşlemler</th>
        </tr>
    </thead>
    <tbody id="receiptItems">
        <!-- Dinamik olarak eklenen ürünler buraya gelecek -->
    </tbody>
</table>

<!-- Toplam Tutar -->
<h4>Toplam: <span id="totalAmount">0.00 TL</span></h4>

<!-- Fişi Tamamla Butonu -->
<button id="createReceiptBtn" class="btn btn-success mt-3">Fişi Oluştur</button>

<script>
    let warehouseId = new URLSearchParams(window.location.search).get("warehouseId");
    let receiptItems = [];

    // Ürün Arama Butonu
    $("#searchProductBtn").click(function() {
        let productId = $("#productIdInput").val();
        if (!productId) {
            Swal.fire("Hata!", "Lütfen geçerli bir ürün ID girin!", "error");
            return;
        }

        $.get(`/Receipt/GetWarehouseProduct?warehouseId=${warehouseId}&productId=${productId}`, function(response) {
            if (response.success) {
                addProductToReceipt(response.data);
            } else {
                Swal.fire("Hata!", response.message, "error");
            }
        }).fail(function(xhr) {
            Swal.fire("Hata!", "Ürün getirilirken bir hata oluştu!", "error");
            console.log("Hata:", xhr.responseText);
        });
    });

    // Ürünü Fişe Ekleme
    function addProductToReceipt(product) {
        if (!product || !product.productId) {
            Swal.fire("Hata!", "Geçerli bir ürün bilgisi alınamadı!", "error");
            return;
        }

        let existingProduct = receiptItems.find(item => item.productId === product.productId);
        if (existingProduct) {
            Swal.fire("Hata!", "Bu ürün zaten fişe eklenmiş!", "error");
            return;
        }

        let newRow = `
            <tr data-id="${product.productId}">
                <td>${product.productName}</td>
                <td>${product.categoryName}</td>
                <td>${product.price} TL</td>
                <td>${product.stockQuantity}</td>
                <td><input type="number" class="form-control quantity-input" value="1" min="1" max="${product.stockQuantity}"></td>
                <td class="subtotal">${product.price} TL</td>
                <td><button class="btn btn-danger remove-product">Sil</button></td>
            </tr>
        `;

        $("#receiptItems").append(newRow);

        receiptItems.push({
            productId: product.productId,
            quantity: 1,
            price: product.price
        });

        updateTotal();
    }

    // Ürün Miktarı Değişince Toplamı Güncelle
    $(document).on("input", ".quantity-input", function() {
        let row = $(this).closest("tr");
        let productId = row.data("id");
        let quantity = parseInt($(this).val());
        let price = parseFloat(row.find(".subtotal").text().split(" ")[0]);

        let product = receiptItems.find(p => p.productId === productId);
        if (product) {
            product.quantity = quantity;
            row.find(".subtotal").text((product.price * quantity).toFixed(2) + " TL");
        }

        updateTotal();
    });

    // Ürünü Fişten Sil
    $(document).on("click", ".remove-product", function() {
        let row = $(this).closest("tr");
        let productId = row.data("id");

        receiptItems = receiptItems.filter(p => p.productId !== productId);
        row.remove();

        updateTotal();
    });

    // Toplam Tutarı Güncelle
    function updateTotal() {
        let total = receiptItems.reduce((sum, item) => sum + (item.price * item.quantity), 0);
        $("#totalAmount").text(total.toFixed(2) + " TL");
    }

          $("#createReceiptBtn").click(function () {
        if (receiptItems.length === 0) {
            Swal.fire("Hata!", "Lütfen en az bir ürün ekleyin!", "error");
            return;
        }

        $.ajax({
            url: "/Receipt/CreateReceipt",
            type: "POST",
            contentType: "application/json",
            data: JSON.stringify({ warehouseId: warehouseId }),
            success: function (response) {
                if (response.success) {
                    let receiptId = response.receiptId;

                    // JSON verisini ProductId ve Quantity formatına uygun hale getiriyoruz
                    let products = receiptItems.map(item => ({
                        ProductId: item.productId,  // Büyük harf!
                        Quantity: item.quantity    // Büyük harf!
                    }));

                    $.ajax({
                        url: `/Receipt/AddProductsToReceipt?receiptId=${receiptId}`,
                        type: "POST",
                        contentType: "application/json",
                        data: JSON.stringify(products),
                        success: function (response) {
                            Swal.fire("Başarılı!", "Fiş başarıyla oluşturuldu!", "success").then(() => {
                                window.location.href = "/Receipt/List";
                            });
                        },
                        error: function () {
                            Swal.fire("Hata!", "Ürünleri fişe eklerken bir hata oluştu!", "error");
                        }
                    });
                } else {
                    Swal.fire("Hata!", response.message, "error");
                }
            },
            error: function (xhr) {
                Swal.fire("Hata!", "Fiş oluşturulurken hata oluştu: " + xhr.responseText, "error");
            }
        });
    });


</script>
